taskKey="com.javarush.games.spaceinvaders.part08"\n\nИгра Space Invaders (8/34)

Продолжим работу над созданием вражеского флота. Для этого в методе createShips заполним список ships. Учтем, что
оптимальным расстоянием от верхней границы экрана до первого сверху ряда кораблей будет 12 ячеек.
Для добавления вражеского флота в игру создадим поле enemyFleet в классе SpaceInvadersGame и проинициализируем
его новым объектом типа EnemyFleet. Вражеские корабли создаются при вызове метода createShips в конструкторе объекта EnemyFleet
Так как игра динамическая, нам нужно периодически перерисовывать
экран и выполнять другие действия. Все, что будет происходить на каждом шаге, выполняется в методе onTurn(int).
Чтобы задать частоту работы этого метода, мы будем использовать метод setTurnTimer. Он принимает на вход параметр —
длительность каждого шага в миллисекундах. Т.е. при значении шага в 40 мс (0,04с) мы получим частоту работы метода onTurn,
равную 25 разам в секунду (1/0,04с). Если все сделал правильно, запустив программу, ты увидишь вражеский флот.


Требования:
1.	В методе createShips() класса EnemyFleet необходимо создать и добавить в список ships ROWS_COUNT * COLUMNS_COUNT новых вражеских кораблей.
2.	Каждый вражеский корабль необходимо создавать с параметрами конструктора: x * STEP, y * STEP + 12, где x &mdash; переменная цикла от 0 включительно до COLUMNS_COUNT не включительно; y &mdash; переменная цикла от 0 включительно до ROWS_COUNT не включительно.
3.	В классе EnemyFleet должен существовать один публичный конструктор без параметров.
4.	В конструкторе класса EnemyFleet необходимо вызвать метод createShips().
5.	В классе EnemyFleet должен существовать публичный метод void draw(Game game).
6.	В методе draw(Game game) у каждого вражеского корабля из списка ships необходимо вызвать метод draw(Game). В качестве параметра передай game.
7.	В классе SpaceInvadersGame должно существовать приватное поле enemyFleet типа EnemyFleet.
8.	Поле enemyFleet должно быть проинициализировано в методе createGame() новым объектом типа EnemyFleet до вызова метода drawScene().
9.	В методе drawScene() после вызова метода drawField() у объекта enemyFleet должен быть вызван метод draw(Game). В качестве параметра передай в метод &quot;this&quot;.
10.	В классе SpaceInvadersGame должен быть переопределен метод onTurn(int) родительского класса Game.
11.	В методе onTurn(int) должен быть вызван метод drawScene().
12.	В методе createGame() класса SpaceInvadersGame должен быть вызван метод setTurnTimer(int) класса Game с параметром 40.
13.	В классе EnemyFleet должен быть импорт класса com.javarush.engine.cell.Game.


Игра Space Invaders (7/34)

В этой части мы подготовим основу для вражеского флота. Для этого создадим класс EnemyFleet. Он будет хранить
список кораблей, количество рядов кораблей(ROWS_COUNT), количество кораблей в ряду(COLUMNS_COUNT) и расстояние между
левыми верхними углами соседних кораблей(STEP). Создавать корабли и заполнять ими список(ships) мы будем в методе createShips,
но к его реализации приступим позже.



Игра Space Invaders (6/34)

Сейчас мы создадим класс Ship, который будет хранить в себе общие свойства космических кораблей. В нем будет
метод setStaticView, который на данный момент устанавливает матрицу, а позже будет еще и задавать анимацию.
Первым сделаем корабль представителя вражеского флота EnemyShip. Его матрицу мы прислали тебе в классе
ShapeMatrix.



Игра Space Invaders (5/34)

Внешний вид игрового объекта на плоскости задается в виде матрицы. Кроме формы, она содержит порядковый номер цвета из списка цветов
com.javarush.engine.cell.Color. Размеры объекта вынесем в отдельные поля — для удобства.
Чтобы отобразить игровой объект на экране, реализуем метод draw(Game), в котором для каждой ячейки матрицы matrix будем вызывать метод
setCellValueEx(int x, int y, Color color, String text) у объекта типа Game.
Для отрисовки элемента матрицы matrix на экране необходимо учитывать, что x и y класса GameObject — это координаты
левого верхнего угла матрицы matrix.
Обрати внимание, что color — это цвет из матрицы объекта, который можно получить так: Color.values()[matrix[i][j]], где
i – координата y в матрице matrix,
j – координата x в матрице matrix.



Игра Space Invaders (4/34)

Для отображения звезды можно использовать любой символ из стандарта Юникод. Его будем хранить в поле STAR_SIGN класса Star.
Создадим метод draw(Game) для отображения звезд на игровом поле. У объекта типа Game в этом методе будем вызывать setCellValueEx,
передавая в него координаты звезды, цвет фона, ее символ, цвет символа и его размер. Обрати внимание, что
тип координат x и y — double, поэтому при вызове метода setCellValueEx их нужно привести к типу int.
Теперь добавим звезды в игру. Для этого создадим список и метод, который будет заполнять этот список новыми звездами.
Не забудь вызвать метод отрисовки звезд в нужном месте.



Игра Space Invaders (3/34)

Давай реализуем метод drawField() — закрасим игровое поле одним цветом.
Поскольку в игре будут разные игровые объекты, вынесем их общие характеристики, такие как координаты положения на игровом поле,
в отдельный родительский класс GameObject.
Первыми игровыми объектами будут звезды. Для их описания создадим класс Star, который унаследуем от класса GameObject.



