taskKey="com.javarush.games.spaceinvaders.part07"\n\nИгра Space Invaders (7/34)

В этой части мы подготовим основу для вражеского флота. Для этого создадим класс EnemyFleet. Он будет хранить
список кораблей, количество рядов кораблей(ROWS_COUNT), количество кораблей в ряду(COLUMNS_COUNT) и расстояние между
левыми верхними углами соседних кораблей(STEP). Создавать корабли и заполнять ими список(ships) мы будем в методе createShips,
но к его реализации приступим позже.


Требования:
1.	В пакете gameobjects в отдельном файле должен существовать публичный класс EnemyFleet.
2.	В классе EnemyFleet должно существовать приватное статическое final поле int ROWS_COUNT, инициализированное при объявлении значением 3.
3.	В классе EnemyFleet должно существовать приватное статическое final поле int COLUMNS_COUNT, инициализированное при объявлении значением 10.
4.	В классе EnemyFleet должно существовать приватное статическое final поле int STEP, инициализированное при объявлении значением ShapeMatrix.ENEMY.length + 1.
5.	В классе EnemyFleet должно существовать приватное поле ships типа List&lt;EnemyShip&gt;.
6.	В классе EnemyFleet должен существовать приватный метод void createShips().
7.	Поле ships должно быть инициализировано в методе createShips() новым объектом типа ArrayList&lt;EnemyShip&gt;.


Игра Space Invaders (6/34)

Сейчас мы создадим класс Ship, который будет хранить в себе общие свойства космических кораблей. В нем будет
метод setStaticView, который на данный момент устанавливает матрицу, а позже будет еще и задавать анимацию.
Первым сделаем корабль представителя вражеского флота EnemyShip. Его матрицу мы прислали тебе в классе
ShapeMatrix.



Игра Space Invaders (5/34)

Внешний вид игрового объекта на плоскости задается в виде матрицы. Кроме формы, она содержит порядковый номер цвета из списка цветов
com.javarush.engine.cell.Color. Размеры объекта вынесем в отдельные поля — для удобства.
Чтобы отобразить игровой объект на экране, реализуем метод draw(Game), в котором для каждой ячейки матрицы matrix будем вызывать метод
setCellValueEx(int x, int y, Color color, String text) у объекта типа Game.
Для отрисовки элемента матрицы matrix на экране необходимо учитывать, что x и y класса GameObject — это координаты
левого верхнего угла матрицы matrix.
Обрати внимание, что color — это цвет из матрицы объекта, который можно получить так: Color.values()[matrix[i][j]], где
i – координата y в матрице matrix,
j – координата x в матрице matrix.



Игра Space Invaders (4/34)

Для отображения звезды можно использовать любой символ из стандарта Юникод. Его будем хранить в поле STAR_SIGN класса Star.
Создадим метод draw(Game) для отображения звезд на игровом поле. У объекта типа Game в этом методе будем вызывать setCellValueEx,
передавая в него координаты звезды, цвет фона, ее символ, цвет символа и его размер. Обрати внимание, что
тип координат x и y — double, поэтому при вызове метода setCellValueEx их нужно привести к типу int.
Теперь добавим звезды в игру. Для этого создадим список и метод, который будет заполнять этот список новыми звездами.
Не забудь вызвать метод отрисовки звезд в нужном месте.



Игра Space Invaders (3/34)

Давай реализуем метод drawField() — закрасим игровое поле одним цветом.
Поскольку в игре будут разные игровые объекты, вынесем их общие характеристики, такие как координаты положения на игровом поле,
в отдельный родительский класс GameObject.
Первыми игровыми объектами будут звезды. Для их описания создадим класс Star, который унаследуем от класса GameObject.



Игра Space Invaders (2/34)

Все игровые действия происходят в космосе. Для его отрисовки объявим метод drawField().
Создавать все элементы игры будем в методе createGame(), а отрисовывать их — в методе drawScene().
Все объекты создаются при запуске игры, поэтому в методе initialize() вызовем
setScreenSize(int, int), а после него — метод createGame().



