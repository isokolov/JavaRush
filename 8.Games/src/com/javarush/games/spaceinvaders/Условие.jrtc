taskKey="com.javarush.games.spaceinvaders.part09"\n\nИгра Space Invaders (9/34)

В игре будет все двигаться, а значит, нам нужно определять направление движения объектов. Хранить направления удобно
в enum'е. Движение вражеского корабля опишем в методе move. В зависимости от направления и скорости, он меняет
соответствующую координату. У движения вниз скорость постоянная — 2. Поскольку вражеский флот движется от одного края
игрового поля к другому, нам нужно контролировать достижение флотом боковых границ.


Требования:
1.	В отдельном файле должен существовать публичный enum Direction со значениями: RIGHT, LEFT, UP, DOWN.
2.	В классе EnemyShip должен существовать публичный метод void move(Direction direction, double speed).
3.	В методе move(Direction direction, double speed) необходимо увеличить значение поля x на speed, если direction равно Direction.RIGHT.
4.	В методе move(Direction direction, double speed) необходимо уменьшить значение поля x на speed, если direction равно Direction.LEFT.
5.	В методе move(Direction direction, double speed) необходимо увеличить значение поля y на 2, если direction равно Direction.DOWN.
6.	В классе EnemyFleet должен существовать приватный метод double getLeftBorder().
7.	Метод getLeftBorder() должен возвращать минимальную координату x среди всех вражеских кораблей из списка ships.
8.	В классе EnemyFleet должен существовать приватный метод double getRightBorder().
9.	Метод getRightBorder() должен возвращать максимальное из значений (x + width) среди всех вражеских кораблей из списка ships.


Игра Space Invaders (8/34)

Продолжим работу над созданием вражеского флота. Для этого в методе createShips заполним список ships. Учтем, что
оптимальным расстоянием от верхней границы экрана до первого сверху ряда кораблей будет 12 ячеек.
Для добавления вражеского флота в игру создадим поле enemyFleet в классе SpaceInvadersGame и проинициализируем
его новым объектом типа EnemyFleet. Вражеские корабли создаются при вызове метода createShips в конструкторе объекта EnemyFleet
Так как игра динамическая, нам нужно периодически перерисовывать
экран и выполнять другие действия. Все, что будет происходить на каждом шаге, выполняется в методе onTurn(int).
Чтобы задать частоту работы этого метода, мы будем использовать метод setTurnTimer. Он принимает на вход параметр —
длительность каждого шага в миллисекундах. Т.е. при значении шага в 40 мс (0,04с) мы получим частоту работы метода onTurn,
равную 25 разам в секунду (1/0,04с). Если все сделал правильно, запустив программу, ты увидишь вражеский флот.



Игра Space Invaders (7/34)

В этой части мы подготовим основу для вражеского флота. Для этого создадим класс EnemyFleet. Он будет хранить
список кораблей, количество рядов кораблей(ROWS_COUNT), количество кораблей в ряду(COLUMNS_COUNT) и расстояние между
левыми верхними углами соседних кораблей(STEP). Создавать корабли и заполнять ими список(ships) мы будем в методе createShips,
но к его реализации приступим позже.



Игра Space Invaders (6/34)

Сейчас мы создадим класс Ship, который будет хранить в себе общие свойства космических кораблей. В нем будет
метод setStaticView, который на данный момент устанавливает матрицу, а позже будет еще и задавать анимацию.
Первым сделаем корабль представителя вражеского флота EnemyShip. Его матрицу мы прислали тебе в классе
ShapeMatrix.



Игра Space Invaders (5/34)

Внешний вид игрового объекта на плоскости задается в виде матрицы. Кроме формы, она содержит порядковый номер цвета из списка цветов
com.javarush.engine.cell.Color. Размеры объекта вынесем в отдельные поля — для удобства.
Чтобы отобразить игровой объект на экране, реализуем метод draw(Game), в котором для каждой ячейки матрицы matrix будем вызывать метод
setCellValueEx(int x, int y, Color color, String text) у объекта типа Game.
Для отрисовки элемента матрицы matrix на экране необходимо учитывать, что x и y класса GameObject — это координаты
левого верхнего угла матрицы matrix.
Обрати внимание, что color — это цвет из матрицы объекта, который можно получить так: Color.values()[matrix[i][j]], где
i – координата y в матрице matrix,
j – координата x в матрице matrix.



Игра Space Invaders (4/34)

Для отображения звезды можно использовать любой символ из стандарта Юникод. Его будем хранить в поле STAR_SIGN класса Star.
Создадим метод draw(Game) для отображения звезд на игровом поле. У объекта типа Game в этом методе будем вызывать setCellValueEx,
передавая в него координаты звезды, цвет фона, ее символ, цвет символа и его размер. Обрати внимание, что
тип координат x и y — double, поэтому при вызове метода setCellValueEx их нужно привести к типу int.
Теперь добавим звезды в игру. Для этого создадим список и метод, который будет заполнять этот список новыми звездами.
Не забудь вызвать метод отрисовки звезд в нужном месте.



