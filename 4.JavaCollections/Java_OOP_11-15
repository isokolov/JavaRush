
Lesson11 (OOP Intro) (all tasks solved)
- task11.task1101; /* 4%,  1, 1.07, 21132 */
- task11.task1102; /* 2%,  1, 1.02, 21098 */
- task11.task1103; /* 3%,  1, 1.04, 21081 */
- task11.task1104; /* 6%,  1, 1.08, 21081 */
- task11.task1105; /* 8%,  1, 1.11, 21215 */
- task11.task1106; /* 4%,  1, 1.07, 21082 */
# task11.task1107; /* 14%, 1, 1.2,  21114 */
# task11.task1108; /* 24%, 1, 1.47, 21137 */
# task11.task1109; /* 39%, 1, 1.83, 21109 */
# task11.task1110; /* 30%, 1, 1.56, 21062 */
- task11.task1111; /* 1%,  1, 1.02, 20772 */
- task11.task1112; /* 1%,  1, 1.01, 20727 */
- task11.task1113; /* 5%,  1, 1.05, 20690 */
- task11.task1114; /* 1%,  1, 1.01, 20644 */
- task11.task1115; /* 3%,  1, 1.03, 20629 */
- task11.task1116; /* 2%,  1, 1.02, 20625 */
* task11.task1117; /* 18%, 2, 1.89, 20789 */
(Класс Pig должен быть унаследован от класса Animal.) (Thought pig is predator)
- task11.task1118; /* 4%,  1, 1.04, 20599 */
- task11.task1119; /* 17%, 1, 1.39, 20632 */
- task11.task1120; /* 8%,  1, 1.11, 20603 */
- task11.task1121; /* 11%, 1, 1.16, 20646 */
- task11.task1122; /* 8%,  1, 1.1,  20528 */
* task11.task1123; /* 7%,  2, 1.35, 19474 */
(Метод getMinimumAndMaximum не должен изменять массив inputArray.) (Did with Arrays.sort,
but task was different. READ ATTENTEVELY)


Lesson12 (Polyphormis, Overloading, Overriding, ClassCast) (all tasks solved)
#### Overriding, instanceof #####
# task12.task1201; /* 34%, 1, 1.6,  21024 */
# task12.task1202; /* 31%, 1, 1.49, 20975 */
# task12.task1203; /* 8%,  1, 1.14, 20823 */ (return new SubClass())
- task12.task1204; /* 24%, 1, 1.61, 20710 */
- task12.task1205; /* 21%, 1, 1.46, 20723 */
#### Overloading ####
- task12.task1206; /* 24%, 1, 1.46, 20743 */
# task12.task1207; /* 32%, 1, 1.79, 20651 */ (Look to study)
- task12.task1208; /* 10%, 1, 1.18, 20578 */
- task12.task1209; /* 19%, 1, 1.39, 20509 */
- task12.task1210; /* 15%, 1, 1.2,  20473 */
#### abstract classes ####
- task12.task1211; /* 11%, 1, 1.15, 20681 */
- task12.task1212; /* 4%,  1, 1.1,  20647 */
- task12.task1213; /* 14%, 1, 1.31, 20698 */
# task12.task1214; /* 33%, 1, 1.81, 20685 */
- task12.task1215; /* 13%, 1, 1.37, 20587 */
#### Interfaces ####
# task12.task1216  /* 25%, 1, 1.44, 20574 */
* task12.task1217  /* 3%,  2, 1.14, 20526 */ (type error & didn't check. Wrote canSwim instead of CanSwim)
# task12.task1218; /* 60%, 1, 3.13, 20722 */
# task12.task1219; /* 50%, 1, 2.44, 20340 */
- task12.task1220; /* 17%, 1, 1.35, 20393 */
#### Bonus ####
- task12.task1221; /* 14%, 1, 1.23, 20115 */
# task12.task1222; /* 31%, 1, 1.56, 20215 */
- task12.task1223; /* 19%, 1, 1.32, 20113 */
- task12.task1224; /* 12%, 1, 1.19, 19875 */
# task12.task1225; /* 30%, 1, 1.54, 19747 */ (GREAT CHIDDUSH)
(if you do first if (o instanceof Cat) then new Tiger(), and new Lion() will return "Кот")
# task12.task1226  /* 32%, 1, 1.64, 19664 */ (logic)
- task12.task1227; /* 35%, 1, 1.6,  19842 */
* task12.task1228; /* 5%,  2, 1.42, 19879 */ (READ ATTENTEVELY THE TASK!)
(Класс Human должен реализовывать три интерфейса. Убедись, что Human действительно содержит только два метода.)
# task12.task1229; /* 27%, 1, 1.46, 19683 */ (cooperation interface, extends)
# task12.task1230; /* 41%, 1, 1.86, 19701 */
# task12.task1231; /* 30%, 1, 1.39, 19615 */
- task12.task1232; /* 5%,  1, 1.07, 19599 */
- task12.task1233; /* 21%, 1, 1.41, 18733 */

Lesson13 (Intrfaces, abstract classes extended) (all tasks solved)
#### Interfaces ####
- task13.task1301; /* 27%, 1, 1.76, 20230 */
- task13.task1302; /* 35%, 1, 1.58, 20322 */
# task13.task1303; /* 12%, 1, 1.2,  20148 */ (.getClass().getSimpleName())
- task13.task1304; /* 6%,  1, 1.13, 20106 */
# task13.task1305; /* 24%, 3, 3.46, 19654 */ (NEED TO STUDY)
(Для доступа к переменной HOBBY нет необходимости создавать объект Dream.)
(В методе main должна быть команда System.out.println(Dream.HOBBY.toString()))
# task13.task1306; /* 35%, 1, 1.83, 19592 */
# task13.task1307; /* 32%, 1, 2.17, 19842 */ (first time Generics)
- task13.task1308; /* 15%, 1, 1.33, 19863 */
# task13.task1309; /* 54%, 1, 2.15, 19877 */
* task13.task1310; /* 26%, 2, 2.21, 19832 */ (BE ATTENTIVE, READ CAREFULLY THE TASK. DON'T HURRY)
(Класс SmartGirl должен реализовывать интерфейс Secretary.)
#### Abstract classes ####
- task13.task1311; /* 20%, 1, 1.4,  19973 */
- task13.task1312; /* 3%,  1, 1.06, 19910 */
# task13.task1313; /* 27%, 1, 1.58, 19917 */ (need to think, used hint abstract.)
(Abstract classes don't need to implement interfaces)
- task13.task1314; /* 18%, 1, 1.58, 19851 */
- task13.task1315; /* 16%, 1, 1.33, 20016 */
#### Bonus ####
# task13.task1316; /* 29%, 1, 1.53, 19514 */
- task13.task1317; /* 18%, 1, 1.31, 19317 */
# task13.task1318; /* 75%, 1, 3.85, 18658 */ (#### Did after learning FileInputStream ####)
# task13.task1319; /* 66%, 1, 3.09, 18236 */ (#### Did after learning FileInputStream ####)
- task13.task1320; /* 35%, 1, 1.77, 18464 */
- task13.task1321; /* 18%, 1, 1.34, 18736 */
# task13.task1322; /* 25%, 1, 1.65, 18443 */ (generics similar to task1307)
- task13.task1323; /* 3%,  1, 1.04, 18654 */
- task13.task1324; /* 15%, 1, 1.25, 18705 */
# task13.task1325; /* 45%, 1, 2.17, 18763 */
# task13.task1326; /* 57%, 1, 3.01, 16221 */ (### Did after learning Streams. BufferedReader, InputStreamReader, FileInputStream)
# task13.task1327; /* 45%, 1, 2.13, 16954 */
* task13.task1328; /* 23%, 2, 2.12, 16305 */ (logic not clearly explained)
(Переменная hitCount должна иметь уровень доступа private.
Метод attack должен возвращать BodyPart.CHEST в некоторых случаях.)
- task13.task1326; (must use FileInputStream. Will do later)
- task13.task1318; (like task1326) (ready)
- task13.task1319; (like task1326) (ready)

Lesson14 (Class Cast) (all tasks solved)
- task14.task1401; /* 11%, 1, 1.18, 19441 */
- task14.task1402; /* 4%,  1, 1.06, 19390 */
# task14.task1403; /* 16%, 1, 1.35, 19226 */ (connection inheritance - return type)
- task14.task1404; /* 35%, 1, 2.31, 18504 */
- task14.task1405; /* 25%, 1, 1.52, 18696 */
- task14.task1406; /* 27%, 1, 1.45, 18937 */
# task14.task1407; /* 14%, 1, 1.48, 18592 */ if (person instanceof Player) ((Player) person).play();
# task14.task1408; /* 73%, 1, 4.17, 17655 */ (Not difficult. Must be careful with details)
- task14.task1409; /* 21%, 1, 1.41, 18032 */
- task14.task1410; /* 27%, 1, 1.68, 17741 */
# task14.task1411; /* 34%, 1, 1.85, 17252 */ (chidush, static classes inside interface)
# task14.task1412; /* 6%,  1, 1.13, 17476 */ (instanceof interfaceName)
- task14.task1413; /* 36%, 1, 1.89, 17423 */
* task14.task1414; /* 31%, 2, 2.56, 16639 */ (with try, catch accepted.)(DIDN'T READ ATTENTEVELY)
(Для каждой введенной строки (в том числе для некорректной) необходимо вызвать метод MovieFactory.getMovie.)
# task14.task1415  /* 20%, 1, 1.38, 17172 */ ( ((OneRoomApt) apartment).clean1Room(); )
# task14.task1416; /* 51%, 1, 2.15, 17099 */ (easy)
# task14.task1417; /* 24%, 1, 1.42, 16557 */ (chidush: constructor & getter in abstract class)
# task14.task1418; /* 54%, 1, 2.57, 16394 */ (attention and think)
# task14.task1419; /* 30%, 1, 1.77, 15457 */ (Learn different Exceptions)
* task14.task1420; /* 29%, 2, 2.41, 15753 */ (Euklid NOD. With sout(nod) accepted but not with sout("n"+nod)
(П-ма должна выводить на экран наибольший общий делитель(НОД) чисел с клавиатуры и успешно завершаться.)
# task14.task1421; /* 50%, 1, 2.14, 16231 */ (Simple Singleton intro)

Lesson15 (Interface)
- task15.task1501; /* 19%, 1, 1.57, 18270 */
- task15.task1502; /* 28%, 1, 1.6,  18125 */
# task15.task1503; /* 68%, 1, 1.35, 18111 */
* task15.task1504; /* 31%, 3, 3.66, 16864 */ (DIDN'T HAVE PATIENCE TO READ ALL DETAILS)
(Метод getBook в классе MarkTwainBook должен иметь тип возвращаемого значение MarkTwainBook.)
(Метод getBook в классе AgathaChristieBook должен возвращать текущий объект (this).)
# task15.task1505; /* 44%, 1, 2.09, 16469 */ (THINKING NEEDED)
# task15.task1506; /* 44%, 1, 2.09, 17888 */ (GOOD FOR REPEAT & UNDERSTANDING)
- task15.task1506; /* 21%, 1, 1.5,  16978 */
* task15.task1508; /* 10%, 2, 1.49, 17718 */ (TRIED double, but needed was long. NEED TO REPEAT TOPIC).
- task15.task1509; /* 19%, 1, 1.36, 17658 */
- task15.task1510; /* 12%, 1, 1.27, 17721 */
#### Simplify code ####
# task15.task1511; /* 57%, 1, 2.47, 17829 */ (why so many failed? Need systematic knowledge)
* task15.task1512; /* 40%, 2, 2.95, 17698 */ (EASY. REMEMBER. You don't need to code empty constructor)
(В классе NakedCat не должно быть явно реализованных конструкторов без параметров.)
- task15.task1513  /* 42%, 1, 1.96, 17669 */
#### Static initialization ####
- task15.task1514  /* 23%, 1, 1.52, 17462 */
- task15.task1515  /* 26%, 1, 1.8,  17294 */ (BufferedReader, IOException)
# task15.task1516  /* 55%, 1, 2.37, 16999 */ (not difficult. Limud. Why so many failed?))
# task15.task1517  /* 31%, 1, 1.78, 16765 */ (Chidushim Exception in static)
# task15.task1518  /* 51%, 1, 2.54, 16950 */ (learn)
#### Bonus ####
# task15.task1519  /* 59%, 1, 3.03, 15983 */ (!!!study!!!, for String reg.exp(found google), using continue)
- task15.task1520  /* 11%, 1, 1.17, 16601 */
- task15.task1521  /* 15%, 1, 1.29, 16122 */
# task15.task1522  #### to start ####      (Singleton lazy realization)
* task15.task1523 (repeat constructors. Started.)
(В классе SubSolution должно содержаться 3 различных конструктора. должен содержаться конструктор
 с модификатором доступа по умолчанию. Класс Solution должен быть родителем класса SubSolution.)
- task15.task1524  /* 12%, 1, 1.19, 15384 */
@ task15.task1525; /* 35%, 1, 1.89, 15123 */ (used absolute PATH. Read RELATIVE/ABSOLUTE PATH)
# task15.task1526  /* 21%, 1, 1.34, 15433 */ (Great chidush about inheritance & private!!! Study!!!)
- task15.task1527; #### Will do later. Need String knowledge ####
- task15.task1528  /* 17%, 1, 1.35, 15324 */
- task15.task1529  /* 23%, 2, 2.43, 14881 */ (Easy. Needed to work with variable result. Inattention)
- task15.task1530  /* 32%, 1, 1.78, 14603 */
@ task15.task1531; /* 82%, 1, 3.52, 14961 */ (BigInteger)