Lesson16 Threads Intro
#### Intro ####
- task16.task1601; /* 18%, 1, 1.37, 17037 */
- task16.task1602; /* 19%, 1, 1.38, 16943 */
# task16.task1603; /* 38%, 1, 1.98, 16872 */
- task16.task1604; /* 30%, 1, 1.55, 16755 */
# task16.task1605; /* 41%, 1, 1.96, 16558 */ (using Date)
#### Join ####
- task16.task1606; /* 15%, 1, 1.21, 16725 */
# task16.task1607; /* 48%, 1, 2.36, 16074 */ (1st must understand, think + Thread knowledge)
- task16.task1608; /* 26%, 1, 1.51, 16294 */
- task16.task1609; /* 19%, 1, 1.3,  16522 */
* task16.task1610; /* 19%, 2, 2.01, 16204 */ (NICE TO STUDY)(forgot Thread.sleep(200),NO RUSH,READ ATTENTEVELY)
#### Thread.sleep ####
- task16.task1611; /* 16%, 1, 1.25, 16431 */
* task16.task1612; /* 29%, 2, 2.32, 16029 */ (COULDN'T UNDERSTAND THE LOGIC OF TASK. SAW FORUM)
(Вывод программы должен отображать сколько шагов сделали Иванов и Петров за 2 секунды. Если скорость
бегуна 2 шага в секунду, метод должен работать пол секунды; если скорость бегуна 4 шага в секунду,
метод должен работать четверть секунды. stepNumber = stepNumber + this.owner.getSpeed(); didn't work)
# task16.task1613; /* 42%, 1, 2.09, 16171 */ (thinking & testing)
# task16.task1614; /* 50%, 1, 2.14, 15985 */ (a bit thinking)
- task16.task1615; /* 12%, 1, 1.15, 16034 */
##### Interrupt ####
- task16.task1616; /* 32%, 1, 1.78, 15882 */
# task16.task1617; /* 52%, 1, 2.67, 15462 */ (Thread.sleep(1000) must be inside while())
- task16.task1618; /* 35%, 1, 1.76, 15830 */
* task16.task1619; /* 15%, 2, 1.85, 15776 */ (Did it easily after tips. Myself couldn't. LOMDUS)
(forgot to remove extra sout used for testing)
- task16.task1620; /* 23%, 1, 1.49, 15155 */

##### Bonus #####
- task16.task1621; /* 22%, 1, 1.37, 15389 */ (Thread.currentThread(), main(), review)
# task16.task1622; /* 41%, 1, 1.96, 15137 */
- task16.task1624; /* 6%,  1, 1.1,  14880 */
# task16.task1625; /* 37%, 1, 1.64, 14956 */
* task16.task1626; /* 4%,  7, 2.83, 14551 */ (Got confused, actually easy, READ CAREFULLY)
1)(Метод run класса CountUpRunnable должен каждые полсекунды выводить имя потока,
двоеточие и значение счетчика от 1 до 5 (например: "Увеличиваем: 1").)
2) (Метод run класса CountUpRunnable должен работать примерно 2,5 секунды.) (did first Thread.sleep(500));
* task16.task1627; /* 54%, 2, 3.89, 13936 */ (stupid type error, 2 times ":". CHECK BEFORE VALIDATING!)
(Если игрок стал победителем, его метод run должен вывести надпись getName() + ":победитель!". Например: Sidorov:победитель!)
* task16.task1628; /* 6%, 5, 2.06, 13792 */ (needed to use reader.ready. Read forums to find help)
(run должен считывать из reader и добавлять их в список result. run должен после каждого считывания увеличивать readStringCount на 1.)
(after adding reader.ready point 1 fails)
# task16.task1629; #### started ####
* task16.task1631; /* 44%, 2, 3.07, 12839 */ (first check null. ALWAYS THINK ABOUT NULL)
(Проверь, что метод getImageReader работает правильно если ему передать null)


Lesson17
#### just ####
- task17.task1701; /* 35%, 1, 1.96, 14712 */
- task17.task1702; /* 8%,  1, 1.13, 14676 */
#### synchronized + Singleton ####
# task17.task1703; /* 53%, 1, 2.39, 14724 */ (Chidush to put String outside)
- task17.task1704; /* 15%, 1, 1.29, 14656 */
* task17.task1705; /* 11%, 2, 1.59, 14530 */
(tried synchronized(Garden.class), Убедись, что все методы объявлены с модификатором synchronized. Experiment)
@ task17.task1706; /* 63%, 1, 2.74, 14553 */ (Singleton synchronized)
# task17.task1707; /* 37%, 1, 1.91, 14438 */ (Singleton loke task1706)
#### volatile ####
- task17.task1708; /* 6%,  1, 1.1,  14535 */
- task17.task1709; /* 7%,  1, 1.12, 14462 */
#### Bonus ####
* task17.task1712; /* 13%, 2, 1.7, 10774 */ (Adding in Cook.java. SHOULD BEETER READ TASK. Was a HINT)
(Если есть заказы в очереди с заказами, нить класса Cook должна готовить блюдо и добавлять его в очередь с готовыми блюдами.)
* task17.task1713; /* 52%, 2, 3.87, 12654 */ (Good to learn GENERICS) (if not a type error, could have passed by 1 time)
@ task17.task1714; /* 87%, 1, 5.42, 12629 */ (compareTo, Comparable<Beach). Why so many failed???)
@ task17.task1715; /* 71%, 1, 3.44, 12785 */ (easy, why so many failed?)
* task17.task1716; /* 55%, 2, 5.05, 12806 */ (synchronized chiddushim. See)
(method0, method1, method2 not necessary???)
* task17.task1717; /* 65%, 2, 4.96, 12425 */ (overseen one block.UNATTENTION)
(В классе Solution не должно быть synchronized блоков.)
# task17.task1718; /* 49%, 1, 2.13, 12879 */ (Theory knowledge used. synchronized (Iron.class) {} )
@ task17.task1719; /* 73%, 1, 2.39, 12616 */ (Why many failed. Simple adding synchronized)
* task17.task1720; /* 22%, 2, 2.0,  12332 */ (Unattention. Synchronized added. See BigDecimal)
(методе deposit(BigDecimal money), если необходимо, используй synchronized.)
@ task17.task1721; /* 76%, 1, 4.31, 11054 */ (easy after learning BufferedReader, FileReader)
* task17.task1722; /* 42%, 2, 3.45, 11767 */ (join() unattention, LOMDUS)